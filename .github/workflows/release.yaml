name: Compile & Release WinUtil

on:
  workflow_dispatch: # Manual trigger added
    inputs:
      publish_as_stable:
        description: 'Publish as Stable Release'
        required: true
        default: false
        type: boolean

jobs:
  build-runspace:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Compile WinUtil
        id: compile_winutil
        run: |
          # Run 'Compile.ps1' Script and the script name for WinUtil will be 'winutil.ps1',
          # which's expected by the next steps in this Workflow
          Set-ExecutionPolicy Bypass -Scope Process -Force
          ./Compile.ps1
        continue-on-error: false # Directly fail the job on error, removing the need for a separate check

      - name: Extract Version from winutil.ps1
        id: extract_version
        run: |
          $version = ''
          Get-Content ./winutil.ps1 -TotalCount 30 | ForEach-Object {
            if ($_ -match 'Version\s*:\s*(\d{2}\.\d{2}\.\d{2})') {
              $version = $matches[1]
              echo "version=$version" >> $env:GITHUB_ENV
              break
            }
          }
          if (-not $version) {
            Write-Error "Version not found in winutil.ps1"
            exit 1
          }
        continue-on-error: false # Directly fail the job on error, removing the need for a separate check

      - name: Create Tag
        id: create_tag
        run: |
          $tagExists = git tag -l "$env:VERSION"
          if ($tagExists -eq "") {
            Write-Host "Making new tag, tag name: '$env:VERSION'"
            git tag "$env:VERSION"
            git push origin "$env:VERSION"
          } else {
            Write-Host "Tag '$env:VERSION' already exists, skipping tag creation"
          }

      - name: Add & Check Release Body
        id: add_check_release_body
        run: |
          # By default, we'll try adding release body (for example, Download Counter), and only in very specific instances where we won't add it
          $release_body = "![GitHub Downloads (specific asset, specific tag)](https://img.shields.io/github/downloads/${{ github.repository }}/${{ env.VERSION }}/winutil.ps1)"

          # Make an Object Array (Object[]) containing all tag releases
          $release_tags = gh release list --json tagName | ConvertFrom-Json | select tagName

          if ($release_tags.Count -eq 0) {
            # Output value to GitHub Environment Variable, so subsequent steps can use it.
            echo "release_body=$release_body" >> $env:GITHUB_ENV
            exit # No need to run rest of script, so do an Early Return/Exit
          }

          $found_tag_in_list = $False
          for ($i = 0; $i -lt $release_tags.Count; $i++) {
            if ($release_tags[$i].tagName -eq "$env:VERSION") {
              $found_tag_in_list = $True
              break
            }
          }

          if ($found_tag_in_list) {
            # Get Release Content for specific tag (WinUtil Version)
            # Which's of type Object Array (Object[]), iterate over every item (line) in the array, and check if it has the release body.
            $gh_release_content = gh release view "$env:VERSION"
            for ($i = 0; $i -lt $gh_release_content.Count; $i++) {
              if ($gh_release_content[$i] -eq $release_body) {
                $release_body = ""
                break
              }
            }
          }

          # Output value to GitHub Environment Variable, so subsequent steps can use it.
          echo "release_body=$release_body" >> $env:GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create and Upload Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: "${{ env.RELEASE_BODY }}"
          append_body: true
          files: ./winutil.ps1
          prerelease: ${{ ! fromJSON(env.PUBLISH_AS_STABLE) }}
          generate_release_notes: true
          make_latest: "${{ fromJSON(env.PUBLISH_AS_STABLE) }}"
          # Note:
          #   inputs for workflow are weird, as their values are strings & powered by JavaScript under the hood,
          #   meaning if you use 'github.event.inputs.INPUT_NAME' or 'inputs.INPUT_NAME', it'll treat every input as a string,
          #   so for boolean paramters, always convert your boolean input parameter (which is a string) to an actual boolean value,
          #   by putting your input in an env so you type-cast it to boolean using 'fromJSON' built-in GitHub Actions Expression, resource:
          #     - https://github.com/actions/runner/issues/1483
          #     - https://github.com/actions/runner/issues/1483#issuecomment-1031671517
          #     - https://github.com/actions/runner/issues/1483#issuecomment-1090972149
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_AS_STABLE: ${{ inputs.publish_as_stable }}
